call print(--- negation ---)
neg(x, y) := !!(x->y)
call eval(neg)

call print(--- conjunction ---)
conj1(x) := 0 & x
call eval(conj1)
conj2(x) := 1 & x
call eval(conj2)
conj3(x, y) := (x->y) & (x->y) & x
call eval(conj3)

call print(--- disjunction ---)
disj1(x) := 0 | x
call eval(disj1)
disj2(x) := 1 | x
call eval(disj2)
disj3(x, y) := (x->y) | (x->y) | x
call eval(disj3)

call print(--- implication ---)
imp1(x) := (x + 1) -> 1 -> x 
call eval(imp1)
imp2(x) := 0 -> (x + 1) -> x
call eval(imp2)
imp3(x) := (x + 1) -> (x + 1) -> x
call eval(imp3)
imp4(x) := !(x + 1) -> 0
call eval(imp4)
imp5(x) := !(x + 1) -> (x + 1)
call eval(imp5)
imp6(x) := (x + 1) -> !(x + 1)
call eval(imp6)
imp7(x) := (x + 1) -> 0 -> 0 -> x
call eval(imp7)
#in-place normalization
imp8(x) := !(x->0) -> 0 -> 0
call eval(imp8)

call print(--- equality ---)
eq1(x) := 1 = x
call eval(eq1)
eq2(x) := 0 = x
call eval(eq2)
eq3(x) := x = x
call eval(eq3)
eq4(x, y) := !x = !y
call eval(eq4)
eq5(x, y, z) := z = !(x->y) = (x->y) = 0
call eval(eq5)

call print(--- plus ---)
plus1(x) := 1 + x
call eval(plus1)
plus2(x) := 0 + x
call eval(plus2)
plus3(x) := x + x
call eval(plus3)
plus4(x, y) := !x + !y
call eval(plus4)
plus5(x, y, z) := z + !(x->y) + (x->y) + 1
call eval(plus5)