conj1(x) := 0 & x
call eval(conj1)
conj2(x) := 1 & x
call eval(conj2)
conj3(x, y) := (x->y) & (x->y) & x
call eval(conj3)
conj4(x, y) := (x + y) & x & !(x + y)
call eval(conj4)
conj5(x) := x & (x = 0)
call eval(conj5)
conj6(x, y) := (x + y) & x & (y + x + 1)
call eval(conj6)
# rule x & !x with grouping
conj7(x, y, z) := !(x & y) & y & z & x
call eval(conj7)

# De Morgan (all)
conj8a(x, y) := (x+1) & (y->0)
call eval(conj8a)
# De Morgan (half)
conj8b(x, y) := !x & y
call eval(conj8b)
# De Morgan (child evaluation, in-place normalization and backward transformation)
conj8c(x, y, z) := !(x | y | z) & !x
call eval(conj8c)

# Absorption law (simple case)
conj9a(x, y, z) := (x->y) & (y | (x->y)) & z
call eval(conj9a)
# Absorption law (complex case)
conj9b(x, y, z) := z & (x | y) & (y | (x->y) | x)
call eval(conj9b)

# Gluing laws (simple case) - ok
conj10a(x, y, z) := (x | y) & (!y | x) & z
call eval(conj10a)
# Gluing laws (simple case) - fail
conj10b(x, y, z, u) := z & (x | y) & (!y | x | u)
call eval(conj10b)
# Gluing laws (complex case) - ok
conj10c(x, y, z) := (x | y | z) & (x -> z) & (!z | y | x) 
call eval(conj10c)
# Gluing laws (complex case) - fail
conj10d(x, y, z, u, v) := (x | y | z) & (x | u | v) & (x -> z)
call eval(conj10d)

