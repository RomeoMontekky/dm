imp1(x) := (x + 1) -> 1 -> x 
call eval(imp1)
imp2(x) := 0 -> (x + 1) -> x
call eval(imp2)
imp3(x) := (x + 1) -> (x + 1) -> x
call eval(imp3)
imp4(x, y) := !(x + y) -> 0
call eval(imp4)
imp4a(x, y) := (x + y + 1) -> 0
call eval(imp4a)
imp4b(x, y) := (x = 0 = y) -> 0
call eval(imp4b)
imp5(x, y) := !(x + y) -> (x + y)
call eval(imp5)
imp5a(x, y) := (x + y + 1) -> (x + y)
call eval(imp5a)
imp6(x, y) := (x = y) -> !(x = y)
call eval(imp6)
imp6a(x, y) := (x = y) -> (y = 0 = x)
call eval(imp6a)
imp7(x) := (x + 1) -> 0 -> 0 -> x
call eval(imp7)
# grouping, reduction (x -> x -> y) => y, in-place normalization
imp8(x, y) := x -> y -> 0 -> (x -> y -> 0) -> (x -> 0) -> 0
call eval(imp8)
# grouping, reduction (x -> !x) => !x
imp9(x, y) := (x + y) -> x -> !((x + y) -> x)
call eval(imp9)
# grouping, reduction (x -> 0 -> y -> (x -> 0)
imp10(x, y) := x -> 0 -> y -> (x -> 0)
call eval(imp10)
# rule (x -> y -> x) => (x) without grouping.
imp11(x) := (x + 1) -> x -> (x + 1)
call eval(imp11)
# rule (x -> y -> x) => (x) with grouping.
imp12(x, y, z) := x -> y -> z -> (x + y + z) -> (x -> y -> z)
call eval(imp12)
# multilevel evaluation/normalization/simplification
imp13(x) := x -> (!((x + 1) -> 1 -> (x -> 0)) -> (x -> 0) -> 0)
call eval(imp13)
# absense of commutativity
imp14(x, y) := (x -> y) -> (y -> x)
call eval(imp14)

# full reverse implication rule
imp15a(x, y, z) := (z=0) -> (x->y->0)
call eval(imp15a)
# half reverse implication rule
imp15b(x, y, z) := z -> (x -> y)
call eval(imp15b)
# full linear reverse implication rule
imp15c(x, y) := (y -> 0 -> !x)
call eval(imp15c)
# half linear reverse implication rule
imp15d(x, y, z) := z -> 0 -> (x -> y)
call eval(imp15d)