# tests of eval function (base set).

# test of operands' movability.
base1a(x, y) := (x -> y) + (x -> y)
call eval(base1a)
base1b(x, y) := (x -> y) + (y -> x)
call eval(base1b)
base1c(x, y) := (x = y) + (x = y)
call eval(base1c)
base1d(x, y) := (x = y) + (y = x)
call eval(base1d)

# test of representative negation equivalents.
base2a(x, y) := !(x -> y)
call eval(base2a)
base2b(x, y) :=  (x -> y) = 0
call eval(base2b)
base2c(x, y) :=  (x -> y) + 1
call eval(base2c)
base2d(x, y) := !(x = y)
call eval(base2d)
base2e(x, y) :=  (x = y) -> 0
call eval(base2e)
base2f(x, y) :=  (x = y) +  1
call eval(base2f)
base2g(x, y) := !(x + y)
call eval(base2g)
base2h(x, y) :=  (x + y) -> 0
call eval(base2h)
base2i(x, y) :=  (x + y) =  0
call eval(base2i)
base2j(x) :=  x -> 0
call eval(base2j)
base2k(x) :=  x = 0
call eval(base2k)
base2l(x) :=  x + 1
call eval(base2l)
base2m(x, y) :=  (x & y) -> 0
call eval(base2m)
base2n(x, y) :=  (x & y) = 0
call eval(base2n)
base2o(x, y) :=  (x & y) + 1
call eval(base2o)

# test of in-place simplification after making negation equivalents representative.
base3(x, y, z) := (((x + y) -> 0) + z) -> 0
call eval(base3)

# test of reserse implication equality
base4a(x, y) := (x -> !y) = (y -> !x)
call eval(base4a)
base4b(x1, x2, y1, y2, y3) := (x1 -> x2 -> (y1 -> y2 -> y3 -> 0)) = (y1 -> y2 -> y3 -> (x1 -> x2 -> 0))
call eval(base4b)
base4c(x1, x2, y1, y2, y3) := (x1 -> x2 -> 0 -> (y1 -> y2 -> y3)) = (y1 -> y2 -> y3 -> 0 -> (x1 -> x2))
call eval(base4c)

# test of equality/inequality of mutually reverse operations.
base5a(x, y) :=  (x + y) & (x = y = 0)
call eval(base5a)
base5b(x, y) :=  (x + y) & ((x = y)->0)
call eval(base5b)
base5c(x, y) :=  (x + y + 1) & (y = x)
call eval(base5c)
base5d(x, y) :=  !(x + y) & (y = x)
call eval(base5d)
base5e(x, y, z) := (x + y + z) & (y = x = z)
call eval(base5e)
base5f(x, y, z) := (x + y) & (y = x = z)
call eval(base5f)

# test neg/not-neg checking of mutually reverse operations.
base6a(x, y) := (x = y) & (x + y)
call eval(base6a)
base6b(x, y) := (x = y = 0) & (x + y + 1)
call eval(base6b)
base6c(x, y, z) := (x = y = z) & (z + x + y + 1)
call eval(base6c)


call eval(unknown) # error: uknown name of variable.