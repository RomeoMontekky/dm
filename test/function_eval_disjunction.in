disj1(x) := 0 | x
call eval(disj1)
disj2(x) := 1 | x
call eval(disj2)
disj3(x, y) := (x->y) | (x->y) | x
call eval(disj3)
disj4(x, y) := (x + y) | x | !(x + y)
call eval(disj4)
disj5(x) := x | (x = 0)
call eval(disj5)
disj6(x, y) := (x + y) | x | (y + x + 1)
call eval(disj6)
# rule x & !x with grouping
disj7(x, y, z) := ((x | y) -> 0) | y | z | x
call eval(disj7)
# De Morgan (all)
disj8(x, y) := (x+1) | (y->0)
call eval(disj8)
# De Morgan (half)
disj9(x, y) := !x | y
call eval(disj9)
# De Morgan (child evaluation, in-place normalization and backward transformation)
disj10(x, y, z) := !(x & y & z) | !x
call eval(disj10)