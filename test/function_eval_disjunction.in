disj1(x) := 0 | x
call eval(disj1)
disj2(x) := 1 | x
call eval(disj2)
disj3(x, y) := (x->y) | (x->y) | x
call eval(disj3)
disj4(x, y) := (x + y) | x | !(x + y)
call eval(disj4)
disj5(x) := x | (x = 0)
call eval(disj5)
disj6(x, y) := (x + y) | x | (y + x + 1)
call eval(disj6)

# rule x & !x with grouping
disj7a(x, y, z) := ((x | y) -> 0) | y | z | x
call eval(disj7a)
# rule x & !x with grouping after De Morgan
disj7b(x, y, u1, u2, u3) := u1 | u2 | u3 | (x & y) | !x | !y 
call eval(disj7b)

# De Morgan (all)
disj8a(x, y) := (x+1) | (y->0)
call eval(disj8a)
# De Morgan (half)
disj8b(x, y) := !x | y
call eval(disj8b)
# De Morgan (child evaluation, in-place normalization and backward transformation)
disj8c(x, y, z) := !(x & y & z) | !x
call eval(disj8c)

# Absorption law (simple case)
disj9a(x, y, z) := (x->y) | (y & (x->y)) | z
call eval(disj9a)
# Absorption law (complex case)
disj9b(x, y, z) := z | (x & y) | (y & (x->y) & x)
call eval(disj9b)

# Gluing laws (simple case) - ok
disj10a(x, y, z) := (x & y) | (!y & x) | z
call eval(disj10a)
# Gluing laws (simple case) - fail
disj10b(x, y, z, u) := z | (x & y) | (!y & x & u)
call eval(disj10b)
# Gluing laws (complex case) - ok
disj10c(x, y, z) := (x & y & z) | (x -> z) | (!z & y & x) 
call eval(disj10c)
# Gluing laws (complex case) - fail
disj10d(x, y, z, u, v) := (x & y & z) | (x & u & v) | (x -> z)
call eval(disj10d)